var d;

var gridSize = 20;
var mazeFindingSpeed = 100;
var pathfindingSpeed = 10;

var grid = [];
var stack = [];
var current;

var openSet = [], closedSet = [];
var path = [];
var start, end;

var foundPath = false;
var mazeComplete = false;

function setup() {
    createCanvas(400, 400);
   // frameRate(10);

    d = floor(width / gridSize);

    for (var i = 0; i < gridSize; i++) {
        for (var j = 0; j < gridSize; j++) {
            var point = new Point(i, j);
            grid.push(point);
        }
    }
    
    current = grid[0];
    current.visited = true;

    start = grid[0];
    end = grid[index(gridSize - 1, gridSize - 1)];
    openSet.push(start);

    //CreateObstacles();
    console.log(grid);
}

function draw() {
    background(51);

    for (var i = 0; i < grid.length; i++) {
        grid[i].show();
    }

    if(!mazeComplete) {
        frameRate(mazeFindingSpeed);

        //Step 1
        var next = current.checkNeighbours();
        if (next) {
            next.visited = true;
            //Step 2
            stack.push(current);
            //Step 3
            removeWalls(current, next);
            //Step 4
            current = next;
        }
        else if (stack.length > 0) {
            current = stack.pop();
        }
        else {
            mazeComplete = true;
            //save grid
        }
    }
    else {
        //Pathfinding
        frameRate(pathfindingSpeed);
        current = FindPath(openSet, closedSet, foundPath, start, end);
        if (current == null || current == undefined) current = end;
               
        DrawPath(path, current);
        if (current == end) {
            var colour = color(0, 0, 255, 100);
            current.highlight(colour);
            noLoop();
        }
    }
    var colour = color(0, 0, 255, 100);
    current.highlight(colour);
    
}
function Point(x, y) {
    this.x = x;
    this.y = y;

    this.gCost = 0;
    this.hCost = 0;
    this.fCost = 0;
    //top, right, bottom, left
    this.walls = [1, 1, 1, 1];

    this.visited = false;

    this.neighbours = [];
    this.parent = null;
}
Point.prototype.highlight = function (colour) {
    noStroke();
    fill(colour);
    rect(this.x*d, this.y*d, d, d);
}

Point.prototype.show=function() {
    var x = this.x * d;
    var y = this.y * d;

    stroke(255);

    if (this.walls[0]) {//top
        line(x    , y    , x + d, y    );
    }
    if (this.walls[1]) {//right
        line(x + d, y    , x + d, y + d);
    }
    if (this.walls[2]) {//bottom
        line(x + d, y + d, x    , y + d);
    }
    if (this.walls[3]) {//left
        line(x    , y + d, x    , y    );
    }

    if (this.visited) {

        noStroke();
        fill(255, 0, 255,100);
        rect(x, y, d, d);
    }
}

function index(i, j) {
    if (i < 0 || j < 0 || j > gridSize - 1 || i > gridSize - 1) {
        return -1;
    }
    return (j + i * gridSize);
}

Point.prototype.checkNeighbours = function () {
    var i = this.x;
    var j = this.y;
    var neighbours = [];

    var top    = grid[index(i, j - 1)];
    var right  = grid[index(i + 1, j)];
    var bottom = grid[index(i, j + 1)];
    var left   = grid[index(i - 1, j)];

    if (top && !top.visited) {
        neighbours.push(top);
    }
    if (right && !right.visited) {
        neighbours.push(right);
    }
    if (bottom && !bottom.visited) {
        neighbours.push(bottom);
    }
    if (left && !left.visited) {
        neighbours.push(left);
    }
        
    if (neighbours.length > 0) {
        var r = floor(random(0, neighbours.length));
        return neighbours[r];
    }
    else {
        return undefined;
    }
}
function RemoveFromArray(array, element) {
    for (i = array.length - 1; i >= 0; i--) {
        if (array[i] == element) {
            array.splice(i, 1);
        }
    }
}
function GetDistanceEuclidean(pointA, pointB) {
    return dist(pointA.x, pointA.y, pointB.x, pointB.y);
}
function GetDistanceManhattan(pointA, pointB) {
    return (abs(pointA.x - pointB.x) + abs(pointA.j - pointB.j));
}
function removeWalls(a, b) {
    var x = a.x - b.x;
    var y = a.y - b.y;

    if (x === 1) {
        a.walls[3] = false;
        b.walls[1] = false;
    }
    else if (x === -1) {
        a.walls[1] = false;
        b.walls[3] = false;
    }
    if (y === 1) {
        a.walls[0] = false;
        b.walls[2] = false;
    }
    else if (y === -1) {
        a.walls[2] = false;
        b.walls[0] = false;
    }

    if (!(a.neighbours.includes(b)))
        a.neighbours.push(b);
    if (!(b.neighbours.includes(a)))
        b.neighbours.push(a);
}
function FindPath(openSet, closedSet, foundPath, start, end) {
    var current;
    //while openSet not empty
    if (openSet.length > 0 && !foundPath) {

        //current = node in openSet with lowest fScore
        current = openSet[0];
        for (i = 1; i < openSet.length; i++) {
            if (openSet[i].fCost < current.fCost) {
                current = openSet[i];
            }
        }

        //if current node is end node; path is found
        if (current == end) {
            console.log("Path length is: " + path.length);
            foundPath = true;
            console.log("DONE!!");            
        }

        //remove current from openset and add to closed
        RemoveFromArray(openSet, current);
        closedSet.push(current);
        //check neighbours. if they are closed else update path
        var neighbours = current.neighbours;
        for (i = 0; i < neighbours.length; i++) {
            var neighbour = neighbours[i];

            //ignore neighbour if closed
            if (!(closedSet.includes(neighbour))) {
                var tempGCost =
                    current.gCost + GetDistanceEuclidean(neighbour, current);

                //add neighbour to openSet if not present
                if (openSet.includes(neighbour)) {
                    if (tempGCost < neighbour.gCost) {
                        neighbour.gCost = tempGCost;
                        neighbour.hCost = GetDistanceEuclidean(neighbour, end);
                        neighbour.fCost = neighbour.gCost + neighbour.hCost;
                        neighbour.parent = current;
                    }
                }
                else {
                    neighbour.gCost = tempGCost;
                    openSet.push(neighbour);
                    neighbour.hCost = GetDistanceEuclidean(neighbour, end);
                    neighbour.fCost = neighbour.gCost;// + neighbour.hCost;
                    neighbour.parent = current;
                }
            }
        }
    }
    return current;
}

function DrawPath(path, current) {
    path = [];
    var temp = current;
    path.push(temp);
    while (temp.parent != null) {
        path.push(temp.parent);
        temp = temp.parent;
    }
    for (var p = 0; p < path.length; p++) {
        var colour = color(255, 165, 0, 150);
        path[p].highlight(colour);
    }
}