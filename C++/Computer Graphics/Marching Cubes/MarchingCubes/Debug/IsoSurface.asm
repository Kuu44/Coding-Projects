; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29914.0 

	TITLE	E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\Debug\IsoSurface.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_sqrtf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0Vec3f@@QAE@XZ				; Vec3f::Vec3f
PUBLIC	??0Vec3f@@QAE@ABU0@@Z				; Vec3f::Vec3f
PUBLIC	??0Vec3f@@QAE@MMM@Z				; Vec3f::Vec3f
PUBLIC	??4Vec3f@@QAEAAU0@ABU0@@Z			; Vec3f::operator=
PUBLIC	?Length@Vec3f@@QBEMXZ				; Vec3f::Length
PUBLIC	?Normalize@Vec3f@@SA?AU1@ABU1@@Z		; Vec3f::Normalize
PUBLIC	??G@YA?AUVec3f@@ABU0@0@Z			; operator-
PUBLIC	??G@YA?AUVec3f@@ABU0@@Z				; operator-
PUBLIC	??0TriMeshFace@@QAE@XZ				; TriMeshFace::TriMeshFace
PUBLIC	??0GRIDCELL@@QAE@XZ				; GRIDCELL::GRIDCELL
PUBLIC	??0IsoSurface@@QAE@XZ				; IsoSurface::IsoSurface
PUBLIC	?FreeMemory@IsoSurface@@QAEXXZ			; IsoSurface::FreeMemory
PUBLIC	?IsoApproximate@IsoSurface@@QAEXMMAAVBaseMesh@@P6AMABUVec3f@@@Z@Z ; IsoSurface::IsoApproximate
PUBLIC	?IsoApproximate@IsoSurface@@QAEXABUVec3f@@0MAAVBaseMesh@@P6AM0@Z@Z ; IsoSurface::IsoApproximate
PUBLIC	?PolygonizeGrids@IsoSurface@@AAEXPAM0H@Z	; IsoSurface::PolygonizeGrids
PUBLIC	?FillGrid@IsoSurface@@AAEXPAMH@Z		; IsoSurface::FillGrid
PUBLIC	?PushPolygons@IsoSurface@@AAE_NAAUGRIDCELL@@@Z	; IsoSurface::PushPolygons
PUBLIC	?MakeObject@IsoSurface@@AAEXAAVBaseMesh@@@Z	; IsoSurface::MakeObject
PUBLIC	?CalcGradient@IsoSurface@@AAEXABUVec3f@@AAU2@@Z	; IsoSurface::CalcGradient
PUBLIC	??0?$Vector@UVec3f@@@@QAE@XZ			; Vector<Vec3f>::Vector<Vec3f>
PUBLIC	??1?$Vector@UVec3f@@@@QAE@XZ			; Vector<Vec3f>::~Vector<Vec3f>
PUBLIC	?Reserve@?$Vector@UVec3f@@@@QAEXI@Z		; Vector<Vec3f>::Reserve
PUBLIC	??A?$Vector@UVec3f@@@@QAEAAUVec3f@@I@Z		; Vector<Vec3f>::operator[]
PUBLIC	?Length@?$Vector@UVec3f@@@@QBEIXZ		; Vector<Vec3f>::Length
PUBLIC	?PushEnd@?$Vector@UVec3f@@@@QAEXABUVec3f@@@Z	; Vector<Vec3f>::PushEnd
PUBLIC	??0?$Vector@UTriMeshFace@@@@QAE@XZ		; Vector<TriMeshFace>::Vector<TriMeshFace>
PUBLIC	??1?$Vector@UTriMeshFace@@@@QAE@XZ		; Vector<TriMeshFace>::~Vector<TriMeshFace>
PUBLIC	?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z	; Vector<TriMeshFace>::Reserve
PUBLIC	??A?$Vector@UTriMeshFace@@@@QAEAAUTriMeshFace@@I@Z ; Vector<TriMeshFace>::operator[]
PUBLIC	?Length@?$Vector@UTriMeshFace@@@@QBEIXZ		; Vector<TriMeshFace>::Length
PUBLIC	?PushEnd@?$Vector@UTriMeshFace@@@@QAEXABUTriMeshFace@@@Z ; Vector<TriMeshFace>::PushEnd
PUBLIC	??$Swap@PAM@Utility@@YAXAAPAM0@Z		; Utility::Swap<float *>
PUBLIC	??_C@_0BM@NAGFIGAN@Out?9of?9bounds?5vector?5access@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@399d4952
PUBLIC	__real@3f800000
PUBLIC	__real@7f7fffff
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_sqrt:PROC
EXTRN	?SignalError@@YAXPBD@Z:PROC			; SignalError
EXTRN	?ColorNormals@BaseMesh@@QAEXXZ:PROC		; BaseMesh::ColorNormals
EXTRN	?Polygonise@@YAHAAUGRIDCELL@@PAUTriMeshFace@@AAHPAUVec3f@@@Z:PROC ; Polygonise
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@399d4952
CONST	SEGMENT
__real@399d4952 DD 0399d4952r			; 0.0003
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BM@NAGFIGAN@Out?9of?9bounds?5vector?5access@
CONST	SEGMENT
??_C@_0BM@NAGFIGAN@Out?9of?9bounds?5vector?5access@ DB 'Out-of-bounds vec'
	DB	'tor access', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z$0
__ehfuncinfo$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z$0
__ehfuncinfo$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IsoSurface@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IsoSurface@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0IsoSurface@@QAE@XZ$1
__ehfuncinfo$??0IsoSurface@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0IsoSurface@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$Swap@PAM@Utility@@YAXAAPAM0@Z
_TEXT	SEGMENT
_Temp$ = -8						; size = 4
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??$Swap@PAM@Utility@@YAXAAPAM0@Z PROC			; Utility::Swap<float *>, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Stdhdr.h
; Line 370
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 371
	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Temp$[ebp], ecx
; Line 372
	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR _t2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 373
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 374
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$Swap@PAM@Utility@@YAXAAPAM0@Z ENDP			; Utility::Swap<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushEnd@?$Vector@UTriMeshFace@@@@QAEXABUTriMeshFace@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?PushEnd@?$Vector@UTriMeshFace@@@@QAEXABUTriMeshFace@@@Z PROC ; Vector<TriMeshFace>::PushEnd, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.cpp
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN2@PushEnd
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z ; Vector<TriMeshFace>::Reserve
$LN2@PushEnd:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 12
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushEnd@?$Vector@UTriMeshFace@@@@QAEXABUTriMeshFace@@@Z ENDP ; Vector<TriMeshFace>::PushEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Length@?$Vector@UTriMeshFace@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Length@?$Vector@UTriMeshFace@@@@QBEIXZ PROC		; Vector<TriMeshFace>::Length, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 276
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$Vector@UTriMeshFace@@@@QBEIXZ ENDP		; Vector<TriMeshFace>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$Vector@UTriMeshFace@@@@QAEAAUTriMeshFace@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??A?$Vector@UTriMeshFace@@@@QAEAAUTriMeshFace@@I@Z PROC	; Vector<TriMeshFace>::operator[], COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 236
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@operator
; Line 238
	push	OFFSET ??_C@_0BM@NAGFIGAN@Out?9of?9bounds?5vector?5access@
	call	?SignalError@@YAXPBD@Z			; SignalError
	add	esp, 4
$LN2@operator:
; Line 241
	imul	eax, DWORD PTR _k$[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
; Line 242
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@UTriMeshFace@@@@QAEAAUTriMeshFace@@I@Z ENDP	; Vector<TriMeshFace>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z
_TEXT	SEGMENT
tv89 = -304						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
$T4 = -272						; size = 4
$T5 = -260						; size = 4
$T6 = -248						; size = 4
_index$7 = -44						; size = 4
_NewData$8 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_Size$ = 8						; size = 4
?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z PROC		; Vector<TriMeshFace>::Reserve, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 212
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN1@Reserve
; Line 215
	mov	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T6[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@Reserve
	push	OFFSET ??0TriMeshFace@@QAE@XZ		; TriMeshFace::TriMeshFace
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN9@Reserve
$LN8@Reserve:
	mov	DWORD PTR tv89[ebp], 0
$LN9@Reserve:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _NewData$8[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Reserve
; Line 218
	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 12
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _NewData$8[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 219
	mov	DWORD PTR _index$7[ebp], 0
	jmp	SHORT $LN4@Reserve
$LN2@Reserve:
	mov	eax, DWORD PTR _index$7[ebp]
	add	eax, 1
	mov	DWORD PTR _index$7[ebp], eax
$LN4@Reserve:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$7[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Reserve
; Line 221
	imul	eax, DWORD PTR _index$7[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TriMeshFace@@QAE@XZ			; TriMeshFace::TriMeshFace
; Line 222
	jmp	SHORT $LN2@Reserve
$LN3@Reserve:
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@Reserve:
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NewData$8[ebp]
	mov	DWORD PTR [eax], ecx
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Reserve:
; Line 228
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z$0:
	xor	ebx, ebx
	mov	eax, DWORD PTR $T6[ebp]
	mov	ecx, 12					; 0000000cH
	mul	ecx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reserve@?$Vector@UTriMeshFace@@@@QAEXI@Z ENDP		; Vector<TriMeshFace>::Reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$Vector@UTriMeshFace@@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$Vector@UTriMeshFace@@@@QAE@XZ PROC			; Vector<TriMeshFace>::~Vector<TriMeshFace>, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Vector
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Vector:
; Line 69
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@UTriMeshFace@@@@QAE@XZ ENDP			; Vector<TriMeshFace>::~Vector<TriMeshFace>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$Vector@UTriMeshFace@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$Vector@UTriMeshFace@@@@QAE@XZ PROC			; Vector<TriMeshFace>::Vector<TriMeshFace>, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@UTriMeshFace@@@@QAE@XZ ENDP			; Vector<TriMeshFace>::Vector<TriMeshFace>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushEnd@?$Vector@UVec3f@@@@QAEXABUVec3f@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?PushEnd@?$Vector@UVec3f@@@@QAEXABUVec3f@@@Z PROC	; Vector<Vec3f>::PushEnd, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.cpp
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN2@PushEnd
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$Vector@UVec3f@@@@QAEXI@Z	; Vector<Vec3f>::Reserve
$LN2@PushEnd:
; Line 116
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [ecx+4], 12
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushEnd@?$Vector@UVec3f@@@@QAEXABUVec3f@@@Z ENDP	; Vector<Vec3f>::PushEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Length@?$Vector@UVec3f@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Length@?$Vector@UVec3f@@@@QBEIXZ PROC			; Vector<Vec3f>::Length, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 276
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@?$Vector@UVec3f@@@@QBEIXZ ENDP			; Vector<Vec3f>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$Vector@UVec3f@@@@QAEAAUVec3f@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??A?$Vector@UVec3f@@@@QAEAAUVec3f@@I@Z PROC		; Vector<Vec3f>::operator[], COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 236
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@operator
; Line 238
	push	OFFSET ??_C@_0BM@NAGFIGAN@Out?9of?9bounds?5vector?5access@
	call	?SignalError@@YAXPBD@Z			; SignalError
	add	esp, 4
$LN2@operator:
; Line 241
	imul	eax, DWORD PTR _k$[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
; Line 242
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@UVec3f@@@@QAEAAUVec3f@@I@Z ENDP		; Vector<Vec3f>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Reserve@?$Vector@UVec3f@@@@QAEXI@Z
_TEXT	SEGMENT
tv89 = -304						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
$T4 = -272						; size = 4
$T5 = -260						; size = 4
$T6 = -248						; size = 4
_index$7 = -44						; size = 4
_NewData$8 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_Size$ = 8						; size = 4
?Reserve@?$Vector@UVec3f@@@@QAEXI@Z PROC		; Vector<Vec3f>::Reserve, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 212
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN1@Reserve
; Line 215
	mov	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T6[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@Reserve
	push	OFFSET ??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN9@Reserve
$LN8@Reserve:
	mov	DWORD PTR tv89[ebp], 0
$LN9@Reserve:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _NewData$8[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Reserve
; Line 218
	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 12
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _NewData$8[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 219
	mov	DWORD PTR _index$7[ebp], 0
	jmp	SHORT $LN4@Reserve
$LN2@Reserve:
	mov	eax, DWORD PTR _index$7[ebp]
	add	eax, 1
	mov	DWORD PTR _index$7[ebp], eax
$LN4@Reserve:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$7[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Reserve
; Line 221
	imul	eax, DWORD PTR _index$7[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
; Line 222
	jmp	SHORT $LN2@Reserve
$LN3@Reserve:
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@Reserve:
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NewData$8[ebp]
	mov	DWORD PTR [eax], ecx
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Reserve:
; Line 228
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z$0:
	xor	ebx, ebx
	mov	eax, DWORD PTR $T6[ebp]
	mov	ecx, 12					; 0000000cH
	mul	ecx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reserve@?$Vector@UVec3f@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reserve@?$Vector@UVec3f@@@@QAEXI@Z ENDP		; Vector<Vec3f>::Reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$Vector@UVec3f@@@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$Vector@UVec3f@@@@QAE@XZ PROC			; Vector<Vec3f>::~Vector<Vec3f>, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Vector
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Vector:
; Line 69
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@UVec3f@@@@QAE@XZ ENDP			; Vector<Vec3f>::~Vector<Vec3f>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$Vector@UVec3f@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$Vector@UVec3f@@@@QAE@XZ PROC			; Vector<Vec3f>::Vector<Vec3f>, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Core\Vector.h
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@UVec3f@@@@QAE@XZ ENDP			; Vector<Vec3f>::Vector<Vec3f>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcGradient@IsoSurface@@AAEXABUVec3f@@AAU2@@Z
_TEXT	SEGMENT
tv216 = -300						; size = 4
tv196 = -300						; size = 4
tv176 = -300						; size = 4
$T1 = -292						; size = 12
$T2 = -272						; size = 12
$T3 = -252						; size = 12
$T4 = -232						; size = 12
_value$ = -20						; size = 4
_this$ = -8						; size = 4
_Pos$ = 8						; size = 4
_Normal$ = 12						; size = 4
?CalcGradient@IsoSurface@@AAEXABUVec3f@@AAU2@@Z PROC	; IsoSurface::CalcGradient, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 10
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 11
	mov	esi, esp
	mov	eax, DWORD PTR _Pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _value$[ebp]
; Line 12
	mov	eax, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Pos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax+380]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	subss	xmm0, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _Normal$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 13
	mov	eax, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+380]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv196[ebp]
	movss	xmm0, DWORD PTR tv196[ebp]
	subss	xmm0, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _Normal$[ebp]
	movss	DWORD PTR [eax+4], xmm0
; Line 14
	mov	eax, DWORD PTR _Pos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+380]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv216[ebp]
	movss	xmm0, DWORD PTR tv216[ebp]
	subss	xmm0, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _Normal$[ebp]
	movss	DWORD PTR [eax+8], xmm0
; Line 15
	mov	eax, DWORD PTR _Normal$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?Normalize@Vec3f@@SA?AU1@ABU1@@Z	; Vec3f::Normalize
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _Normal$[ebp]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 16
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CalcGradient@IsoSurface@@AAEXABUVec3f@@AAU2@@Z ENDP	; IsoSurface::CalcGradient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MakeObject@IsoSurface@@AAEXAAVBaseMesh@@@Z
_TEXT	SEGMENT
_CurFace$1 = -80					; size = 4
_FaceIndex$2 = -68					; size = 4
_CurVertex$3 = -56					; size = 4
_VertexIndex$4 = -44					; size = 4
_I$ = -32						; size = 4
_V$ = -20						; size = 4
_this$ = -8						; size = 4
_Result$ = 8						; size = 4
?MakeObject@IsoSurface@@AAEXAAVBaseMesh@@@Z PROC	; IsoSurface::MakeObject, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 59
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Length@?$Vector@UTriMeshFace@@@@QBEIXZ	; Vector<TriMeshFace>::Length
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Length@?$Vector@UVec3f@@@@QBEIXZ	; Vector<Vec3f>::Length
	push	eax
	mov	eax, DWORD PTR _Result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Result$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 61
	mov	eax, DWORD PTR _Result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _Result$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _V$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _Result$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _Result$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _I$[ebp], eax
; Line 63
	mov	DWORD PTR _VertexIndex$4[ebp], 0
	jmp	SHORT $LN4@MakeObject
$LN2@MakeObject:
	mov	eax, DWORD PTR _VertexIndex$4[ebp]
	add	eax, 1
	mov	DWORD PTR _VertexIndex$4[ebp], eax
$LN4@MakeObject:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Length@?$Vector@UVec3f@@@@QBEIXZ	; Vector<Vec3f>::Length
	cmp	DWORD PTR _VertexIndex$4[ebp], eax
	jae	SHORT $LN3@MakeObject
; Line 65
	imul	eax, DWORD PTR _VertexIndex$4[ebp], 36
	add	eax, DWORD PTR _V$[ebp]
	mov	DWORD PTR _CurVertex$3[ebp], eax
; Line 66
	mov	eax, DWORD PTR _VertexIndex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??A?$Vector@UVec3f@@@@QAEAAUVec3f@@I@Z	; Vector<Vec3f>::operator[]
	push	eax
	mov	ecx, DWORD PTR _CurVertex$3[ebp]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 67
	mov	eax, DWORD PTR _CurVertex$3[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _CurVertex$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcGradient@IsoSurface@@AAEXABUVec3f@@AAU2@@Z ; IsoSurface::CalcGradient
; Line 68
	jmp	SHORT $LN2@MakeObject
$LN3@MakeObject:
; Line 69
	mov	DWORD PTR _FaceIndex$2[ebp], 0
	jmp	SHORT $LN7@MakeObject
$LN5@MakeObject:
	mov	eax, DWORD PTR _FaceIndex$2[ebp]
	add	eax, 1
	mov	DWORD PTR _FaceIndex$2[ebp], eax
$LN7@MakeObject:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Length@?$Vector@UTriMeshFace@@@@QBEIXZ	; Vector<TriMeshFace>::Length
	cmp	DWORD PTR _FaceIndex$2[ebp], eax
	jae	SHORT $LN6@MakeObject
; Line 71
	mov	eax, DWORD PTR _FaceIndex$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$Vector@UTriMeshFace@@@@QAEAAUTriMeshFace@@I@Z ; Vector<TriMeshFace>::operator[]
	mov	DWORD PTR _CurFace$1[ebp], eax
; Line 72
	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _FaceIndex$2[ebp], 3
	mov	eax, DWORD PTR _I$[ebp]
	mov	esi, DWORD PTR _CurFace$1[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 73
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _FaceIndex$2[ebp], 3
	mov	edx, DWORD PTR _I$[ebp]
	mov	esi, DWORD PTR _CurFace$1[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx*4+4], eax
; Line 74
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _FaceIndex$2[ebp], 3
	mov	edx, DWORD PTR _I$[ebp]
	mov	esi, DWORD PTR _CurFace$1[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx*4+8], eax
; Line 75
	jmp	SHORT $LN5@MakeObject
$LN6@MakeObject:
; Line 77
	mov	ecx, DWORD PTR _Result$[ebp]
	call	?ColorNormals@BaseMesh@@QAEXXZ		; BaseMesh::ColorNormals
; Line 78
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeObject@IsoSurface@@AAEXAAVBaseMesh@@@Z ENDP	; IsoSurface::MakeObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushPolygons@IsoSurface@@AAE_NAAUGRIDCELL@@@Z
_TEXT	SEGMENT
_VertexIndex$1 = -68					; size = 4
_FaceIndex$2 = -56					; size = 4
_NewFaceCount$ = -44					; size = 4
_IndexShift$ = -32					; size = 4
_NewVertexCount$ = -20					; size = 4
_this$ = -8						; size = 4
_g$ = 8							; size = 4
?PushPolygons@IsoSurface@@AAE_NAAUGRIDCELL@@@Z PROC	; IsoSurface::PushPolygons, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Length@?$Vector@UVec3f@@@@QBEIXZ	; Vector<Vec3f>::Length
	mov	DWORD PTR _IndexShift$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	lea	ecx, DWORD PTR _NewVertexCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 76					; 0000004cH
	push	edx
	mov	eax, DWORD PTR _g$[ebp]
	push	eax
	call	?Polygonise@@YAHAAUGRIDCELL@@PAUTriMeshFace@@AAHPAUVec3f@@@Z ; Polygonise
	add	esp, 16					; 00000010H
	mov	DWORD PTR _NewFaceCount$[ebp], eax
; Line 84
	cmp	DWORD PTR _NewFaceCount$[ebp], 0
	je	$LN8@PushPolygo
; Line 86
	mov	DWORD PTR _FaceIndex$2[ebp], 0
	jmp	SHORT $LN4@PushPolygo
$LN2@PushPolygo:
	mov	eax, DWORD PTR _FaceIndex$2[ebp]
	add	eax, 1
	mov	DWORD PTR _FaceIndex$2[ebp], eax
$LN4@PushPolygo:
	mov	eax, DWORD PTR _FaceIndex$2[ebp]
	cmp	eax, DWORD PTR _NewFaceCount$[ebp]
	jge	$LN3@PushPolygo
; Line 88
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+ecx]
	add	edx, DWORD PTR _IndexShift$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	esi, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [esi+eax+76]
	mov	DWORD PTR [eax+ecx], edx
; Line 89
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR [edx+eax]
	add	ecx, DWORD PTR _IndexShift$[ebp]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	esi, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [esi+eax+76]
	mov	DWORD PTR [eax+edx], ecx
; Line 90
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR [edx+eax]
	add	ecx, DWORD PTR _IndexShift$[ebp]
	mov	edx, 4
	shl	edx, 1
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	esi, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [esi+eax+76]
	mov	DWORD PTR [eax+edx], ecx
; Line 91
	imul	eax, DWORD PTR _FaceIndex$2[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?PushEnd@?$Vector@UTriMeshFace@@@@QAEXABUTriMeshFace@@@Z ; Vector<TriMeshFace>::PushEnd
; Line 92
	jmp	$LN2@PushPolygo
$LN3@PushPolygo:
; Line 93
	mov	DWORD PTR _VertexIndex$1[ebp], 0
	jmp	SHORT $LN7@PushPolygo
$LN5@PushPolygo:
	mov	eax, DWORD PTR _VertexIndex$1[ebp]
	add	eax, 1
	mov	DWORD PTR _VertexIndex$1[ebp], eax
$LN7@PushPolygo:
	mov	eax, DWORD PTR _VertexIndex$1[ebp]
	cmp	eax, DWORD PTR _NewVertexCount$[ebp]
	jge	SHORT $LN6@PushPolygo
; Line 95
	imul	eax, DWORD PTR _VertexIndex$1[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+196]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?PushEnd@?$Vector@UVec3f@@@@QAEXABUVec3f@@@Z ; Vector<Vec3f>::PushEnd
; Line 96
	jmp	SHORT $LN5@PushPolygo
$LN6@PushPolygo:
; Line 97
	mov	al, 1
	jmp	SHORT $LN1@PushPolygo
$LN8@PushPolygo:
; Line 99
	xor	al, al
$LN1@PushPolygo:
; Line 100
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@PushPolygo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@PushPolygo:
	DD	1
	DD	$LN11@PushPolygo
$LN11@PushPolygo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@PushPolygo
$LN10@PushPolygo:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?PushPolygons@IsoSurface@@AAE_NAAUGRIDCELL@@@Z ENDP	; IsoSurface::PushPolygons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FillGrid@IsoSurface@@AAEXPAMH@Z
_TEXT	SEGMENT
tv162 = -272						; size = 8
tv158 = -264						; size = 4
tv149 = -260						; size = 8
tv145 = -252						; size = 4
_Pos$1 = -52						; size = 12
_y$2 = -32						; size = 4
_x$3 = -20						; size = 4
_this$ = -8						; size = 4
_Grid$ = 8						; size = 4
_z$ = 12						; size = 4
?FillGrid@IsoSurface@@AAEXPAMH@Z PROC			; IsoSurface::FillGrid, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN4@FillGrid
$LN2@FillGrid:
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, 1
	mov	DWORD PTR _x$3[ebp], eax
$LN4@FillGrid:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN3@FillGrid
; Line 106
	mov	DWORD PTR _y$2[ebp], 0
	jmp	SHORT $LN7@FillGrid
$LN5@FillGrid:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 1
	mov	DWORD PTR _y$2[ebp], eax
$LN7@FillGrid:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$2[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN6@FillGrid
; Line 108
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$2[ebp]
	mov	DWORD PTR tv145[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv145[ebp]
	mov	ecx, DWORD PTR tv145[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv149[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv149[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$3[ebp]
	mov	DWORD PTR tv158[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv158[ebp]
	mov	edx, DWORD PTR tv158[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv162[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv162[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Pos$1[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
; Line 109
	mov	esi, esp
	lea	eax, DWORD PTR _Pos$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$3[ebp]
	imul	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _y$2[ebp]
	mov	edx, DWORD PTR _Grid$[ebp]
	fstp	DWORD PTR [edx+ecx*4]
; Line 110
	jmp	$LN5@FillGrid
$LN6@FillGrid:
; Line 111
	jmp	$LN2@FillGrid
$LN3@FillGrid:
; Line 112
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FillGrid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN11@FillGrid:
	DD	1
	DD	$LN10@FillGrid
$LN10@FillGrid:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN9@FillGrid
$LN9@FillGrid:
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?FillGrid@IsoSurface@@AAEXPAMH@Z ENDP			; IsoSurface::FillGrid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PolygonizeGrids@IsoSurface@@AAEXPAM0H@Z
_TEXT	SEGMENT
tv712 = -576						; size = 8
tv676 = -576						; size = 8
tv640 = -576						; size = 8
tv604 = -576						; size = 8
tv548 = -576						; size = 8
tv513 = -576						; size = 8
tv478 = -576						; size = 8
tv443 = -576						; size = 8
tv708 = -568						; size = 4
tv673 = -568						; size = 4
tv637 = -568						; size = 4
tv600 = -568						; size = 4
tv544 = -568						; size = 4
tv510 = -568						; size = 4
tv475 = -568						; size = 4
tv439 = -568						; size = 4
tv699 = -564						; size = 8
tv663 = -564						; size = 8
tv627 = -564						; size = 8
tv591 = -564						; size = 8
tv535 = -564						; size = 8
tv500 = -564						; size = 8
tv465 = -564						; size = 8
tv430 = -564						; size = 8
tv696 = -556						; size = 4
tv660 = -556						; size = 4
tv623 = -556						; size = 4
tv587 = -556						; size = 4
tv532 = -556						; size = 4
tv497 = -556						; size = 4
tv461 = -556						; size = 4
tv426 = -556						; size = 4
$T1 = -548						; size = 12
$T2 = -528						; size = 12
$T3 = -508						; size = 12
$T4 = -488						; size = 12
$T5 = -468						; size = 12
$T6 = -448						; size = 12
$T7 = -428						; size = 12
$T8 = -408						; size = 12
_VertexIndex$9 = -196					; size = 4
_Valid$10 = -181					; size = 1
_g$11 = -172						; size = 128
_y$12 = -36						; size = 4
_x$13 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_TopVals$ = 8						; size = 4
_BottomVals$ = 12					; size = 4
_z$ = 16						; size = 4
?PolygonizeGrids@IsoSurface@@AAEXPAM0H@Z PROC		; IsoSurface::PolygonizeGrids, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 576				; 00000240H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	DWORD PTR _x$13[ebp], 0
	jmp	SHORT $LN4@Polygonize
$LN2@Polygonize:
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	DWORD PTR _x$13[ebp], eax
$LN4@Polygonize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _x$13[ebp], ecx
	jae	$LN3@Polygonize
; Line 118
	mov	DWORD PTR _y$12[ebp], 0
	jmp	SHORT $LN7@Polygonize
$LN5@Polygonize:
	mov	eax, DWORD PTR _y$12[ebp]
	add	eax, 1
	mov	DWORD PTR _y$12[ebp], eax
$LN7@Polygonize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	cmp	DWORD PTR _y$12[ebp], ecx
	jae	$LN6@Polygonize
; Line 120
	lea	ecx, DWORD PTR _g$11[ebp]
	call	??0GRIDCELL@@QAE@XZ
; Line 121
	cvtsi2ss xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _y$12[ebp]
	mov	DWORD PTR tv426[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv426[ebp]
	mov	eax, DWORD PTR tv426[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv430[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv430[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$13[ebp]
	mov	DWORD PTR tv439[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv439[ebp]
	mov	ecx, DWORD PTR tv439[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv443[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv443[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _g$11[ebp+edx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 122
	cvtsi2ss xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _y$12[ebp]
	mov	DWORD PTR tv461[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv461[ebp]
	mov	eax, DWORD PTR tv461[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv465[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv465[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	DWORD PTR tv475[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv475[ebp]
	mov	ecx, DWORD PTR tv475[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv478[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv478[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	ecx, DWORD PTR _g$11[ebp+ecx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 123
	cvtsi2ss xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _y$12[ebp]
	add	edx, 1
	mov	DWORD PTR tv497[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv497[ebp]
	mov	eax, DWORD PTR tv497[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv500[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv500[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	DWORD PTR tv510[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv510[ebp]
	mov	ecx, DWORD PTR tv510[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv513[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv513[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	ecx, DWORD PTR _g$11[ebp+ecx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 124
	cvtsi2ss xmm0, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _y$12[ebp]
	add	edx, 1
	mov	DWORD PTR tv532[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv532[ebp]
	mov	eax, DWORD PTR tv532[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv535[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv535[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$13[ebp]
	mov	DWORD PTR tv544[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv544[ebp]
	mov	ecx, DWORD PTR tv544[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv548[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv548[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _g$11[ebp+edx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$13[ebp]
	imul	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _y$12[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _TopVals$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _g$11[ebp+eax+96], ecx
; Line 127
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR _y$12[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR _TopVals$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _g$11[ebp+edx+96], eax
; Line 128
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR _y$12[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR _TopVals$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _g$11[ebp+edx+96], eax
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$13[ebp]
	imul	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _y$12[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _TopVals$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _g$11[ebp+eax+96], ecx
; Line 131
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$12[ebp]
	mov	DWORD PTR tv587[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv587[ebp]
	mov	ecx, DWORD PTR tv587[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv591[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv591[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$13[ebp]
	mov	DWORD PTR tv600[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv600[ebp]
	mov	edx, DWORD PTR tv600[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv604[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv604[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	edx, 12					; 0000000cH
	shl	edx, 2
	lea	ecx, DWORD PTR _g$11[ebp+edx]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 132
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$12[ebp]
	mov	DWORD PTR tv623[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv623[ebp]
	mov	ecx, DWORD PTR tv623[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv627[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv627[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$13[ebp]
	add	ecx, 1
	mov	DWORD PTR tv637[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv637[ebp]
	mov	edx, DWORD PTR tv637[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv640[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv640[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 5
	lea	ecx, DWORD PTR _g$11[ebp+eax]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 133
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$12[ebp]
	add	eax, 1
	mov	DWORD PTR tv660[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv660[ebp]
	mov	ecx, DWORD PTR tv660[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv663[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv663[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$13[ebp]
	add	ecx, 1
	mov	DWORD PTR tv673[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv673[ebp]
	mov	edx, DWORD PTR tv673[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv676[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv676[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 6
	lea	ecx, DWORD PTR _g$11[ebp+eax]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 134
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$12[ebp]
	add	eax, 1
	mov	DWORD PTR tv696[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv696[ebp]
	mov	ecx, DWORD PTR tv696[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv699[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv699[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$13[ebp]
	mov	DWORD PTR tv708[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv708[ebp]
	mov	edx, DWORD PTR tv708[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv712[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv712[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	push	eax
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 7
	lea	ecx, DWORD PTR _g$11[ebp+eax]
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$13[ebp]
	imul	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _y$12[ebp]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _BottomVals$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _g$11[ebp+edx+96], ecx
; Line 137
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR _y$12[ebp]
	mov	edx, 4
	imul	ecx, edx, 5
	mov	edx, DWORD PTR _BottomVals$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _g$11[ebp+ecx+96], eax
; Line 138
	mov	eax, DWORD PTR _x$13[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR _y$12[ebp]
	mov	edx, 4
	imul	ecx, edx, 6
	mov	edx, DWORD PTR _BottomVals$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR _g$11[ebp+ecx+96], eax
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$13[ebp]
	imul	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _y$12[ebp]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _BottomVals$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _g$11[ebp+eax+96], ecx
; Line 141
	mov	BYTE PTR _Valid$10[ebp], 1
; Line 142
	mov	DWORD PTR _VertexIndex$9[ebp], 0
	jmp	SHORT $LN10@Polygonize
$LN8@Polygonize:
	mov	eax, DWORD PTR _VertexIndex$9[ebp]
	add	eax, 1
	mov	DWORD PTR _VertexIndex$9[ebp], eax
$LN10@Polygonize:
	cmp	DWORD PTR _VertexIndex$9[ebp], 8
	jae	SHORT $LN9@Polygonize
	movzx	eax, BYTE PTR _Valid$10[ebp]
	test	eax, eax
	je	SHORT $LN9@Polygonize
; Line 144
	mov	eax, DWORD PTR _VertexIndex$9[ebp]
	movss	xmm0, DWORD PTR _g$11[ebp+eax*4+96]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@Polygonize
; Line 146
	mov	BYTE PTR _Valid$10[ebp], 0
$LN11@Polygonize:
; Line 148
	jmp	SHORT $LN8@Polygonize
$LN9@Polygonize:
; Line 149
	movzx	eax, BYTE PTR _Valid$10[ebp]
	test	eax, eax
	je	SHORT $LN12@Polygonize
; Line 151
	lea	eax, DWORD PTR _g$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushPolygons@IsoSurface@@AAE_NAAUGRIDCELL@@@Z ; IsoSurface::PushPolygons
$LN12@Polygonize:
; Line 153
	jmp	$LN5@Polygonize
$LN6@Polygonize:
; Line 154
	jmp	$LN2@Polygonize
$LN3@Polygonize:
; Line 155
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Polygonize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN16@Polygonize:
	DD	1
	DD	$LN15@Polygonize
$LN15@Polygonize:
	DD	-172					; ffffff54H
	DD	128					; 00000080H
	DD	$LN14@Polygonize
$LN14@Polygonize:
	DB	103					; 00000067H
	DB	0
?PolygonizeGrids@IsoSurface@@AAEXPAM0H@Z ENDP		; IsoSurface::PolygonizeGrids
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsoApproximate@IsoSurface@@QAEXABUVec3f@@0MAAVBaseMesh@@P6AM0@Z@Z
_TEXT	SEGMENT
$T1 = -304						; size = 4
$T2 = -292						; size = 4
$T3 = -280						; size = 4
$T4 = -268						; size = 4
$T5 = -256						; size = 12
_z$6 = -44						; size = 4
_BottomGrid$ = -32					; size = 4
_TopGrid$ = -20						; size = 4
_this$ = -8						; size = 4
_Start$ = 8						; size = 4
_End$ = 12						; size = 4
_CellSize$ = 16						; size = 4
_Result$ = 20						; size = 4
_Function$ = 24						; size = 4
?IsoApproximate@IsoSurface@@QAEXABUVec3f@@0MAAVBaseMesh@@P6AM0@Z@Z PROC ; IsoSurface::IsoApproximate, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Function$[ebp]
	mov	DWORD PTR [eax+376], ecx
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CellSize$[ebp]
	movss	DWORD PTR [eax+48], xmm0
; Line 28
	mov	eax, DWORD PTR _Start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 29
	mov	eax, DWORD PTR _End$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 30
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??G@YA?AUVec3f@@ABU0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vec3f@@QAEAAU0@ABU0@@Z		; Vec3f::operator=
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	divss	xmm0, DWORD PTR [ecx+48]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
; Line 32
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	divss	xmm0, DWORD PTR [ecx+48]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR [ecx+48]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _TopGrid$[ebp], eax
; Line 36
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _BottomGrid$[ebp], eax
; Line 38
	push	0
	mov	eax, DWORD PTR _TopGrid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillGrid@IsoSurface@@AAEXPAMH@Z	; IsoSurface::FillGrid
; Line 39
	mov	DWORD PTR _z$6[ebp], 1
	jmp	SHORT $LN4@IsoApproxi
$LN2@IsoApproxi:
	mov	eax, DWORD PTR _z$6[ebp]
	add	eax, 1
	mov	DWORD PTR _z$6[ebp], eax
$LN4@IsoApproxi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	cmp	DWORD PTR _z$6[ebp], ecx
	jae	SHORT $LN3@IsoApproxi
; Line 41
	mov	eax, DWORD PTR _z$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _BottomGrid$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillGrid@IsoSurface@@AAEXPAMH@Z	; IsoSurface::FillGrid
; Line 42
	mov	eax, DWORD PTR _z$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _BottomGrid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _TopGrid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PolygonizeGrids@IsoSurface@@AAEXPAM0H@Z ; IsoSurface::PolygonizeGrids
; Line 43
	lea	eax, DWORD PTR _BottomGrid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _TopGrid$[ebp]
	push	ecx
	call	??$Swap@PAM@Utility@@YAXAAPAM0@Z	; Utility::Swap<float *>
	add	esp, 8
; Line 44
	jmp	SHORT $LN2@IsoApproxi
$LN3@IsoApproxi:
; Line 46
	mov	eax, DWORD PTR _TopGrid$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 47
	mov	eax, DWORD PTR _BottomGrid$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 49
	mov	eax, DWORD PTR _Result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeObject@IsoSurface@@AAEXAAVBaseMesh@@@Z ; IsoSurface::MakeObject
; Line 50
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@IsoApproxi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN9@IsoApproxi:
	DD	2
	DD	$LN8@IsoApproxi
$LN8@IsoApproxi:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@IsoApproxi
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@IsoApproxi
$LN7@IsoApproxi:
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN6@IsoApproxi:
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?IsoApproximate@IsoSurface@@QAEXABUVec3f@@0MAAVBaseMesh@@P6AM0@Z@Z ENDP ; IsoSurface::IsoApproximate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsoApproximate@IsoSurface@@QAEXMMAAVBaseMesh@@P6AMABUVec3f@@@Z@Z
_TEXT	SEGMENT
$T1 = -240						; size = 12
_End$ = -28						; size = 12
_this$ = -8						; size = 4
_BoxSize$ = 8						; size = 4
_CellSize$ = 12						; size = 4
_Result$ = 16						; size = 4
_Function$ = 20						; size = 4
?IsoApproximate@IsoSurface@@QAEXMMAAVBaseMesh@@P6AMABUVec3f@@@Z@Z PROC ; IsoSurface::IsoApproximate, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	push	ecx
	movss	xmm0, DWORD PTR _BoxSize$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BoxSize$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BoxSize$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _End$[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
; Line 21
	mov	eax, DWORD PTR _Function$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Result$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _CellSize$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _End$[ebp]
	push	edx
	lea	eax, DWORD PTR _End$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??G@YA?AUVec3f@@ABU0@@Z			; operator-
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsoApproximate@IsoSurface@@QAEXABUVec3f@@0MAAVBaseMesh@@P6AM0@Z@Z ; IsoSurface::IsoApproximate
; Line 22
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@IsoApproxi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN5@IsoApproxi:
	DD	1
	DD	$LN4@IsoApproxi
$LN4@IsoApproxi:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@IsoApproxi
$LN3@IsoApproxi:
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
?IsoApproximate@IsoSurface@@QAEXMMAAVBaseMesh@@P6AMABUVec3f@@@Z@Z ENDP ; IsoSurface::IsoApproximate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FreeMemory@IsoSurface@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FreeMemory@IsoSurface@@QAEXXZ PROC			; IsoSurface::FreeMemory, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeMemory@IsoSurface@@QAEXXZ ENDP			; IsoSurface::FreeMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0IsoSurface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0IsoSurface@@QAE@XZ PROC				; IsoSurface::IsoSurface, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 4
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IsoSurface@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$Vector@UVec3f@@@@QAE@XZ		; Vector<Vec3f>::Vector<Vec3f>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$Vector@UTriMeshFace@@@@QAE@XZ	; Vector<TriMeshFace>::Vector<TriMeshFace>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	OFFSET ??0TriMeshFace@@QAE@XZ		; TriMeshFace::TriMeshFace
	push	10					; 0000000aH
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
	push	OFFSET ??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	push	15					; 0000000fH
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
; Line 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+376], 0
; Line 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@399d4952
	movss	DWORD PTR [eax+380], xmm0
; Line 7
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IsoSurface@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$Vector@UVec3f@@@@QAE@XZ		; Vector<Vec3f>::~Vector<Vec3f>
__unwindfunclet$??0IsoSurface@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$Vector@UTriMeshFace@@@@QAE@XZ	; Vector<TriMeshFace>::~Vector<TriMeshFace>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0IsoSurface@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IsoSurface@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IsoSurface@@QAE@XZ ENDP				; IsoSurface::IsoSurface
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0GRIDCELL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0GRIDCELL@@QAE@XZ PROC				; GRIDCELL::GRIDCELL, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vec3f@@QAE@XZ			; Vec3f::Vec3f
	push	8
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0GRIDCELL@@QAE@XZ ENDP				; GRIDCELL::GRIDCELL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0TriMeshFace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TriMeshFace@@QAE@XZ PROC				; TriMeshFace::TriMeshFace, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Simple Mesh\BaseMesh.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TriMeshFace@@QAE@XZ ENDP				; TriMeshFace::TriMeshFace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?AUVec3f@@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_V$ = 12						; size = 4
??G@YA?AUVec3f@@ABU0@@Z PROC				; operator-, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 310
	mov	eax, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 311
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AUVec3f@@ABU0@@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?AUVec3f@@ABU0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_Left$ = 12						; size = 4
_Right$ = 16						; size = 4
??G@YA?AUVec3f@@ABU0@0@Z PROC				; operator-, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	eax, DWORD PTR _Left$[ebp]
	mov	ecx, DWORD PTR _Right$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Left$[ebp]
	mov	eax, DWORD PTR _Right$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Left$[ebp]
	mov	edx, DWORD PTR _Right$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 306
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AUVec3f@@ABU0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Normalize@Vec3f@@SA?AU1@ABU1@@Z
_TEXT	SEGMENT
_Factor$1 = -20						; size = 4
_Len$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_V$ = 12						; size = 4
?Normalize@Vec3f@@SA?AU1@ABU1@@Z PROC			; Vec3f::Normalize, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	ecx, DWORD PTR _V$[ebp]
	call	?Length@Vec3f@@QBEMXZ			; Vec3f::Length
	fstp	DWORD PTR _Len$[ebp]
; Line 83
	movss	xmm0, DWORD PTR _Len$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Normalize
; Line 85
	mov	eax, DWORD PTR _V$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@@QAE@ABU0@@Z			; Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@Normalize
; Line 86
	jmp	SHORT $LN3@Normalize
$LN2@Normalize:
; Line 89
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _Len$[ebp]
	movss	DWORD PTR _Factor$1[ebp], xmm0
; Line 90
	mov	eax, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _Factor$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _Factor$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _V$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _Factor$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@@QAE@MMM@Z			; Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@Normalize:
; Line 92
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@Vec3f@@SA?AU1@ABU1@@Z ENDP			; Vec3f::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Length@Vec3f@@QBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Length@Vec3f@@QBEMXZ PROC				; Vec3f::Length, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
; Line 68
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vec3f@@QBEMXZ ENDP				; Vec3f::Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Vec3f@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_V$ = 8							; size = 4
??4Vec3f@@QAEAAU0@ABU0@@Z PROC				; Vec3f::operator=, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
; Line 49
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Vec3f@@QAEAAU0@ABU0@@Z ENDP				; Vec3f::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec3f@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@@QAE@MMM@Z PROC				; Vec3f::Vec3f, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@@QAE@MMM@Z ENDP				; Vec3f::Vec3f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec3f@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_V$ = 8							; size = 4
??0Vec3f@@QAE@ABU0@@Z PROC				; Vec3f::Vec3f, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 32
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 34
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vec3f@@QAE@ABU0@@Z ENDP				; Vec3f::Vec3f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec3f@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vec3f@@QAE@XZ PROC					; Vec3f::Vec3f, COMDAT
; _this$ = ecx
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\Engine\Math\Vec3f.inl
; Line 11
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 13
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@@QAE@XZ ENDP					; Vec3f::Vec3f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\vcruntime_new.h
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 169
	mov	eax, DWORD PTR __Where$[ebp]
; Line 170
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; Line 757
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 758
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]
; Line 759
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
; File E:\Docs\Coding_Projects\C++\Computer Graphics\Marching Cubes\MarchingCubes\IsoSurface.cpp
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -200						; size = 4
tv66 = -196						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[ebp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN1@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
